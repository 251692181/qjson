/* This file is part of qjson
  *
  * Copyright (C) 2009 Till Adam <adam@kde.org>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
  *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Library General Public License for more details.
  *
  * You should have received a copy of the GNU Library General Public License
  * along with this library; see the file COPYING.LIB.  If not, write to
  * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */

#ifndef QJSON_SERIALIZER_H
#define QJSON_SERIALIZER_H

#include "qjson_export.h"

class QIODevice;
class QObject;
class QVariant;

//class QString;
#include <QtCore/QStringList>
#include <QtCore/QLatin1String>

namespace QJson {
  /**
  * @brief Main class used for converting QVariant objects to JSON data.
  *
  * QVariant objects are converted to a string containing the JSON data.
  * If QVariant object is empty or not valid a <em>null</em> json object is returned.
  *
  * It's also possible to serialize a QObject instance  to JSON.
  * All the class attributes defined as properties will be serialized.
  *
  * Suppose the declaration of Person class looks like this:
  * \code
  * class Person : public QObject
    {
      Q_OBJECT

      Q_PROPERTY(QString name READ name WRITE setName)
      Q_PROPERTY(int phoneNumber READ phoneNumber WRITE setPhoneNumber)
      Q_PROPERTY(Gender gender READ gender WRITE setGender)
      Q_PROPERTY(QDate dob READ dob WRITE setDob)
      Q_ENUMS(Gender)

     public:
        Person(QObject* parent = 0);
        ~Person();

        QString name() const;
        void setName(const QString& name);

        int phoneNumber() const;
        void setPhoneNumber(const int  phoneNumber);

        enum Gender {Male, Female};
        void setGender(Gender gender);
        Gender gender() const;

        QDate dob() const;
        void setDob(const QDate& dob);

      private:
        QString m_name;
        int m_phoneNumber;
        Gender m_gender;
        QDate m_dob;
    };
    \endcode

    The following code will serialize an instance of Person to JSON :

    \code
    Person person;
    person.setName("Flavio");
    person.setPhoneNumber(123456);
    person.setGender(Person::Male);
    person.setDob(QDate(1982, 7, 12));

    Serializer serializer;
    qDebug() << serializer.serialize( &person);
    \endcode

    The generated output will be:
    \code
    { "dob" : "1982-07-12", "gender" : 0, "name" : "Flavio", "phoneNumber" : 123456 }
    \endcode
  */
  class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

    /**
    * This method generates a textual JSON representation and outputs it to the
    * passed in I/O Device.
    * @param variant The JSON document in its in-memory representation as generated by the
    * parser.
    * @param out Input output device
    * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
    */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok = 0 );

    /**
    * This method generates a textual JSON representation and outputs it to the
    * passed in I/O Device.
    * @param object The QObject instance to be serialized to JSON.
    * @param out Input output device
    * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
    */
    void serialize( const QObject* object, QIODevice* out, bool* ok = 0 );

    /**
    * This is a method provided for convenience. It turns the passed in in-memory
    * representation of the JSON document into a textual one, which is returned.
    * If the returned string is empty, the document was empty. If it was null, there
    * was a parsing error.
    *
    * @param variant The JSON document in its in-memory representation as generated by the
    * parser.
    */
    QByteArray serialize( const QVariant& variant );

    /**
    * This is a method provided for convenience. It serializes a QObject instance
    * to JSON.
    * If the returned string is empty, the document was empty. If it was null, there
    * was a parsing error.
    *
    * @param object The QObject instance to be serialized to JSON.
    */
    QByteArray serialize( const QObject* object, const QStringList& skip = QStringList() << QString(QLatin1String("objectName")));

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
}

#endif // QJSON_SERIALIZER_H
